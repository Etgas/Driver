// Generated by Dagger (https://google.github.io/dagger).
package com.generalmobile.app.driverexample.di.component;

import android.content.Context;
import android.content.SharedPreferences;
import com.generalmobile.app.driverexample.App;
import com.generalmobile.app.driverexample.db.AppDatabase;
import com.generalmobile.app.driverexample.di.module.ApplicationModule;
import com.generalmobile.app.driverexample.di.module.ApplicationModule_ProvideAppFactory;
import com.generalmobile.app.driverexample.di.module.ApplicationModule_ProvideContextFactory;
import com.generalmobile.app.driverexample.di.module.ApplicationModule_ProvideSharedPreferencesFactory;
import com.generalmobile.app.driverexample.di.module.DatabaseModule;
import com.generalmobile.app.driverexample.di.module.DatabaseModule_GetDatabaseFactory;
import com.generalmobile.app.driverexample.di.module.NetModule;
import com.generalmobile.app.driverexample.di.module.NetModule_ProviceServiceFactory;
import com.generalmobile.app.driverexample.di.module.NetModule_ProvideGsonFactory;
import com.generalmobile.app.driverexample.di.module.NetModule_ProvideOkHttpClientFactory;
import com.generalmobile.app.driverexample.di.module.NetModule_ProvideRetrofitFactory;
import com.generalmobile.app.driverexample.service.driverApi;
import com.generalmobile.app.driverexample.ui.adapter.DriverAdapterViewModel;
import com.generalmobile.app.driverexample.ui.dashboard.DashboardViewModel;
import com.generalmobile.app.driverexample.ui.detay.DetayViewModel;
import com.generalmobile.app.driverexample.ui.detay.DetayViewModel_MembersInjector;
import com.generalmobile.app.driverexample.ui.drivers.DriverViewModel;
import com.generalmobile.app.driverexample.ui.drivers.DriverViewModel_MembersInjector;
import com.generalmobile.app.driverexample.ui.main.MainActivityViewModel;
import com.generalmobile.app.driverexample.ui.main.MainActivityViewModel_MembersInjector;
import com.google.gson.Gson;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<App> provideAppProvider;

  private Provider<Context> provideContextProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<AppDatabase> getDatabaseProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit.Builder> provideRetrofitProvider;

  private Provider<driverApi> proviceServiceProvider;

  private DaggerApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideAppProvider =
        DoubleCheck.provider(ApplicationModule_ProvideAppFactory.create(builder.applicationModule));
    this.provideContextProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideContextFactory.create(builder.applicationModule));
    this.provideSharedPreferencesProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideSharedPreferencesFactory.create(builder.applicationModule));
    this.getDatabaseProvider =
        DoubleCheck.provider(
            DatabaseModule_GetDatabaseFactory.create(
                builder.databaseModule, provideContextProvider));
    this.provideGsonProvider =
        DoubleCheck.provider(NetModule_ProvideGsonFactory.create(builder.netModule));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(NetModule_ProvideOkHttpClientFactory.create(builder.netModule));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            NetModule_ProvideRetrofitFactory.create(
                builder.netModule, provideGsonProvider, provideOkHttpClientProvider));
    this.proviceServiceProvider =
        DoubleCheck.provider(
            NetModule_ProviceServiceFactory.create(builder.netModule, provideRetrofitProvider));
  }

  @Override
  public App app() {
    return provideAppProvider.get();
  }

  @Override
  public Context context() {
    return provideContextProvider.get();
  }

  @Override
  public SharedPreferences preferences() {
    return provideSharedPreferencesProvider.get();
  }

  @Override
  public void inject(MainActivityViewModel mainActivityViewModel) {
    injectMainActivityViewModel(mainActivityViewModel);
  }

  @Override
  public void inject(DashboardViewModel dashboardViewModel) {}

  @Override
  public void inject(DriverAdapterViewModel driverAdapterViewModel) {}

  @Override
  public void inject(DetayViewModel detayViewModel) {
    injectDetayViewModel(detayViewModel);
  }

  @Override
  public void inject(DriverViewModel driverViewModel) {
    injectDriverViewModel(driverViewModel);
  }

  private MainActivityViewModel injectMainActivityViewModel(MainActivityViewModel instance) {
    MainActivityViewModel_MembersInjector.injectDb(instance, getDatabaseProvider.get());
    return instance;
  }

  private DetayViewModel injectDetayViewModel(DetayViewModel instance) {
    DetayViewModel_MembersInjector.injectBaseApi(instance, proviceServiceProvider.get());
    return instance;
  }

  private DriverViewModel injectDriverViewModel(DriverViewModel instance) {
    DriverViewModel_MembersInjector.injectBaseApi(instance, proviceServiceProvider.get());
    return instance;
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private DatabaseModule databaseModule;

    private NetModule netModule;

    private Builder() {}

    public ApplicationComponent build() {
      if (applicationModule == null) {
        throw new IllegalStateException(
            ApplicationModule.class.getCanonicalName() + " must be set");
      }
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      if (netModule == null) {
        this.netModule = new NetModule();
      }
      return new DaggerApplicationComponent(this);
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public Builder netModule(NetModule netModule) {
      this.netModule = Preconditions.checkNotNull(netModule);
      return this;
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }
  }
}
